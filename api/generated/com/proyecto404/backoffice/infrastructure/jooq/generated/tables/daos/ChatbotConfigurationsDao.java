/*
 * This file is generated by jOOQ.
 */
package com.proyecto404.backoffice.infrastructure.jooq.generated.tables.daos;


import com.proyecto404.backoffice.infrastructure.jooq.generated.tables.ChatbotConfigurations;
import com.proyecto404.backoffice.infrastructure.jooq.generated.tables.pojos.ChatbotConfigurationsDto;
import com.proyecto404.backoffice.infrastructure.jooq.generated.tables.records.ChatbotConfigurationsRecord;

import java.math.BigDecimal;
import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ChatbotConfigurationsDao extends DAOImpl<ChatbotConfigurationsRecord, ChatbotConfigurationsDto, Integer> {

    /**
     * Create a new ChatbotConfigurationsDao without any configuration
     */
    public ChatbotConfigurationsDao() {
        super(ChatbotConfigurations.CHATBOT_CONFIGURATIONS, ChatbotConfigurationsDto.class);
    }

    /**
     * Create a new ChatbotConfigurationsDao with an attached configuration
     */
    public ChatbotConfigurationsDao(Configuration configuration) {
        super(ChatbotConfigurations.CHATBOT_CONFIGURATIONS, ChatbotConfigurationsDto.class, configuration);
    }

    @Override
    public Integer getId(ChatbotConfigurationsDto object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchById(Integer... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public ChatbotConfigurationsDto fetchOneById(Integer value) {
        return fetchOne(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<ChatbotConfigurationsDto> fetchOptionalById(Integer value) {
        return fetchOptional(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.ID, value);
    }

    /**
     * Fetch records that have <code>api_key BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfApiKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.API_KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>api_key IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByApiKey(String... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.API_KEY, values);
    }

    /**
     * Fetch records that have <code>context BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfContext(String lowerInclusive, String upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.CONTEXT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>context IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByContext(String... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.CONTEXT, values);
    }

    /**
     * Fetch records that have <code>max_tokens BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfMaxTokens(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.MAX_TOKENS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>max_tokens IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByMaxTokens(Integer... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.MAX_TOKENS, values);
    }

    /**
     * Fetch records that have <code>temperature BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfTemperature(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.TEMPERATURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>temperature IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByTemperature(BigDecimal... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.TEMPERATURE, values);
    }

    /**
     * Fetch records that have <code>top_p BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfTopP(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.TOP_P, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>top_p IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByTopP(BigDecimal... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.TOP_P, values);
    }

    /**
     * Fetch records that have <code>frequency_penalty BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfFrequencyPenalty(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.FREQUENCY_PENALTY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>frequency_penalty IN (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByFrequencyPenalty(Integer... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.FREQUENCY_PENALTY, values);
    }

    /**
     * Fetch records that have <code>parameterpresence_penalty BETWEEN
     * lowerInclusive AND upperInclusive</code>
     */
    public List<ChatbotConfigurationsDto> fetchRangeOfParameterpresencePenalty(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.PARAMETERPRESENCE_PENALTY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parameterpresence_penalty IN
     * (values)</code>
     */
    public List<ChatbotConfigurationsDto> fetchByParameterpresencePenalty(Integer... values) {
        return fetch(ChatbotConfigurations.CHATBOT_CONFIGURATIONS.PARAMETERPRESENCE_PENALTY, values);
    }
}
